{
  "name": "video_chunks",
  "document": {
    "fields": [
      {
        "name": "video_id",
        "type": "string",
        "indexing": ["summary", "attribute"]
      },
      {
        "name": "duration",
        "type": "float",
        "indexing": ["summary", "attribute"]
      },
      {
        "name": "num_segments",
        "type": "int",
        "indexing": ["summary", "attribute"]
      },
      {
        "name": "segment_transcripts",
        "type": "array<string>",
        "indexing": ["index", "summary"],
        "match": ["text"],
        "index": "enable-bm25"
      },
      {
        "name": "start_times",
        "type": "array<float>",
        "indexing": ["attribute", "summary"]
      },
      {
        "name": "end_times",
        "type": "array<float>",
        "indexing": ["attribute", "summary"]
      },
      {
        "name": "embedding",
        "type": "tensor<float>(p{},x[1024])",
        "indexing": ["index", "attribute"],
        "ann": {
          "hnsw": {
            "distance-metric": "angular"
          }
        }
      },
      {
        "name": "embedding_binary",
        "type": "tensor<int8>(p{},x[128])",
        "indexing": ["attribute"],
        "attribute": ["distance-metric: hamming"]
      },
      {
        "name": "creation_timestamp",
        "type": "long",
        "indexing": ["summary", "attribute"]
      }
    ]
  },
  "fieldsets": [
    {
      "name": "default",
      "fields": ["segment_transcripts"]
    }
  ],
  "rank_profiles": [
    {
      "name": "default",
      "inputs": [
        {
          "name": "query(qtb)",
          "type": "tensor<int8>(x[128])"
        }
      ],
      "functions": [
        {
          "name": "hamming_distances",
          "expression": "sum(hamming(query(qtb), attribute(embedding_binary)), x)"
        },
        {
          "name": "hamming_scores", 
          "expression": "1.0 / (1.0 + hamming_distances)"
        }
      ],
      "first_phase": {
        "expression": "reduce(hamming_scores, max, p)"
      }
    },
    {
      "name": "float_float",
      "inputs": [
        {
          "name": "query(qt)",
          "type": "tensor<float>(x[1024])"
        }
      ],
      "functions": [
        {
          "name": "cosine_scores",
          "expression": "cosine_similarity(query(qt), attribute(embedding), x)"
        }
      ],
      "first_phase": {
        "expression": "reduce(cosine_scores, max, p)"
      }
    },
    {
      "name": "binary_binary",
      "inputs": [
        {
          "name": "query(qtb)",
          "type": "tensor<int8>(x[128])"
        }
      ],
      "functions": [
        {
          "name": "hamming_distances",
          "expression": "sum(hamming(query(qtb), attribute(embedding_binary)), x)"
        },
        {
          "name": "hamming_scores", 
          "expression": "1.0 / (1.0 + hamming_distances)"
        }
      ],
      "first_phase": {
        "expression": "reduce(hamming_scores, max, p)"
      }
    },
    {
      "name": "float_binary",
      "inputs": [
        {
          "name": "query(qt)",
          "type": "tensor<float>(x[1024])"
        }
      ],
      "functions": [
        {
          "name": "unpack_binary_representation",
          "expression": "2*unpack_bits(attribute(embedding_binary)) - 1"
        },
        {
          "name": "float_binary_cosine",
          "expression": "cosine_similarity(query(qt), unpack_binary_representation, x)"
        }
      ],
      "first_phase": {
        "expression": "reduce(float_binary_cosine, max, p)"
      }
    },
    {
      "name": "hybrid_binary_bm25",
      "inputs": [
        {
          "name": "query(qtb)",
          "type": "tensor<int8>(x[128])"
        }
      ],
      "functions": [
        {
          "name": "hamming_distances",
          "expression": "sum(hamming(query(qtb), attribute(embedding_binary)), x)"
        },
        {
          "name": "hamming_scores", 
          "expression": "1.0 / (1.0 + hamming_distances)"
        },
        {
          "name": "max_visual_similarity",
          "expression": "reduce(hamming_scores, max, p)"
        },
        {
          "name": "text_score",
          "expression": "bm25(segment_transcripts)"
        }
      ],
      "first_phase": {
        "expression": "max_visual_similarity + 0.1 * text_score"
      }
    },
    {
      "name": "hybrid_bm25_binary",
      "inputs": [
        {
          "name": "query(qtb)",
          "type": "tensor<int8>(x[128])"
        }
      ],
      "functions": [
        {
          "name": "hamming_distances",
          "expression": "sum(hamming(query(qtb), attribute(embedding_binary)), x)"
        },
        {
          "name": "hamming_scores", 
          "expression": "1.0 / (1.0 + hamming_distances)"
        },
        {
          "name": "max_visual_similarity",
          "expression": "reduce(hamming_scores, max, p)"
        },
        {
          "name": "text_score",
          "expression": "bm25(segment_transcripts)"
        }
      ],
      "first_phase": {
        "expression": "text_score + 0.1 * max_visual_similarity"
      }
    },
    {
      "name": "hybrid_float_bm25",
      "inputs": [
        {
          "name": "query(qt)",
          "type": "tensor<float>(x[1024])"
        }
      ],
      "functions": [
        {
          "name": "cosine_scores",
          "expression": "cosine_similarity(query(qt), attribute(embedding), x)"
        },
        {
          "name": "max_visual_similarity",
          "expression": "reduce(cosine_scores, max, p)"
        },
        {
          "name": "text_score",
          "expression": "bm25(segment_transcripts)"
        }
      ],
      "first_phase": {
        "expression": "max_visual_similarity + 0.1 * text_score"
      }
    },
    {
      "name": "hybrid_bm25_float",
      "inputs": [
        {
          "name": "query(qt)",
          "type": "tensor<float>(x[1024])"
        }
      ],
      "functions": [
        {
          "name": "cosine_scores",
          "expression": "cosine_similarity(query(qt), attribute(embedding), x)"
        },
        {
          "name": "max_visual_similarity",
          "expression": "reduce(cosine_scores, max, p)"
        },
        {
          "name": "text_score",
          "expression": "bm25(segment_transcripts)"
        }
      ],
      "first_phase": {
        "expression": "text_score + 0.1 * max_visual_similarity"
      }
    },
    {
      "name": "phased",
      "inputs": [
        {
          "name": "query(qtb)",
          "type": "tensor<int8>(x[128])"
        },
        {
          "name": "query(qt)",
          "type": "tensor<float>(x[1024])"
        }
      ],
      "functions": [
        {
          "name": "hamming_distances",
          "expression": "sum(hamming(query(qtb), attribute(embedding_binary)), x)"
        },
        {
          "name": "hamming_scores",
          "expression": "1.0 / (1.0 + hamming_distances)"
        },
        {
          "name": "cosine_scores",
          "expression": "cosine_similarity(query(qt), attribute(embedding), x)"
        }
      ],
      "first_phase": {
        "expression": "reduce(hamming_scores, max, p)"
      },
      "second_phase": {
        "expression": "reduce(cosine_scores, max, p)",
        "rerank_count": 100
      }
    }
  ]
}