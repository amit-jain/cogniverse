[project]
name = "congniverse"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.12"
dependencies = [
    "litellm==1.73.0",
    "modal>=1.0.5",
    # Machine Learning Dependencies
    "jax>=0.7.0",
    "jaxlib>=0.7.0",
    "torch>=2.5.0",
    "transformers>=4.50.0",
    "colpali-engine>=0.3.12",
    # Computer Vision Dependencies
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "pillow>=10.0.0",
    # Audio Processing Dependencies
    "openai-whisper>=20231117",
    # Search Backend Dependencies
    "pyvespa>=0.59.0",
    # Evaluation Framework Dependencies
    "inspect-ai>=0.3.0",
    "ragas>=0.1.0",
    "arize-phoenix>=4.0.0",
    "arize-phoenix-evals>=0.4.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.41b0",
    "pytest-asyncio>=0.23.0",
    # Dashboard Dependencies
    "streamlit>=1.29.0",
    "plotly>=6.0.0",
    "scipy>=1.10.0",
    # Embedding Visualization Dependencies
    "embedding-atlas>=0.2.0",
    "umap-learn>=0.5.0",
    "pyarrow>=14.0.0",
    "scikit-learn>=1.3.0",
    "gliner>=0.2.21",
    "langextract>=1.0.6",
    "aiofiles>=24.1.0",
    "msgpack>=1.1.1",
    "opencv-python>=4.12.0.88",
    "dspy-ai>=3.0.2",
    # MLflow 3.0 for DSPy observability
    "mlflow>=3.0.0",
    # spaCy for dependency parsing in relationships
    "spacy>=3.7.0",
    "faster-whisper>=1.2.0",
    "librosa>=0.11.0",
    "sentence-transformers>=5.1.0",
    "pdf2image>=1.17.0",
    "pypdf2>=3.0.1",
]

[project.optional-dependencies]
dev = [
    # Linting and Code Quality
    "ruff>=0.4.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "isort>=5.12.0",
    # Testing Framework
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    # Security Scanning
    "bandit>=1.7.5",
    "safety>=3.0.0",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
]
ignore = [
    "E501",  # line too long, handled by black
    "E402",  # module level import not at top of file (handled manually with noqa)
    # Relaxed rules - focus on functionality over style
    "B007",  # unused loop variables (common in iteration)
    "B017",  # pytest.raises(Exception) is fine for general error testing
    "B024",  # abstract classes don't always need abstract methods
    "B904",  # raise statements don't always need 'from' chains
    "UP006", # dict/Dict and list/List are both fine
    "UP035", # typing.Dict vs dict is stylistic
    "UP038", # isinstance((int, float)) vs int | float is stylistic 
    "UP045", # Optional[T] vs T | None is stylistic
    "C401",  # set comprehensions vs generator is minor optimization
    "C408",  # dict() vs {} is stylistic
    "W291",  # trailing whitespace (handled by editors)
    "W293",  # blank line with whitespace (handled by editors)
]

[tool.mypy]
python_version = "3.12"
# Relaxed configuration - focus on major issues only
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
ignore_missing_imports = true
# Disable strict checks that cause noise
check_untyped_defs = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_subclassing_any = false
warn_unreachable = false
warn_redundant_casts = false
warn_unused_ignores = false
# Allow dynamic typing patterns
allow_redefinition = true
allow_untyped_globals = true
implicit_reexport = true
# Skip error codes that generate most noise
disable_error_code = [
    "var-annotated",      # Missing type annotations
    "has-type",           # Cannot determine type
    "no-any-return",      # Returning Any
    "union-attr",         # None attribute access
    "arg-type",           # Incompatible argument types
    "assignment",         # Assignment type mismatches
    "index",              # Indexing issues
    "import-untyped",     # Untyped imports
    "return-value",       # Return type issues
    "attr-defined",       # Attribute access on None/wrong type
    "call-arg",           # Too many/few arguments
    "operator",           # Unsupported operand types
    "override",           # Method override issues
    "misc",               # Miscellaneous type issues
    "return",             # Missing return statements
    "annotation-unchecked", # Untyped function bodies
    "empty-body",         # Empty method bodies
    "call-overload",      # Function overload issues
    "abstract",           # Abstract class instantiation
    "list-item",          # List item type mismatches
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "ruff>=0.12.9",
]
