name: Ingestion Pipeline Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'src/app/ingestion/**'
      - 'src/common/**'
      - 'tests/ingestion/**'
      - 'pytest.ini'
      - 'pyproject.toml'
      - '.github/workflows/ingestion-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/app/ingestion/**'
      - 'src/common/**'
      - 'tests/ingestion/**'
      - 'pytest.ini'
      - 'pyproject.toml'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-dri libgl1 libglib2.0-0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Run unit tests
      env:
        COVERAGE_FILE: .coverage
      run: |
        JAX_PLATFORM_NAME=cpu uv run python -m pytest tests/ingestion/unit -m unit \
          --cov=src/app/ingestion \
          --cov-report=term-missing \
          --cov-report=xml:coverage_ingestion.xml
        # Rename the coverage file to avoid conflicts and make it uploadable
        if [ -f .coverage ]; then
          echo "‚úÖ Coverage file found, renaming to coverage_unit.dat"
          mv .coverage coverage_unit.dat
        else
          echo "‚ö†Ô∏è No .coverage file found - this will affect coverage combining"
        fi
    
    - name: Upload coverage data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: coverage_unit.dat
        retention-days: 1
        if-no-files-found: warn
    
    - name: Upload coverage XML
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit-xml
        path: coverage_ingestion.xml
        retention-days: 1
        if-no-files-found: warn
    

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Run linting
      run: |
        make lint-ingestion

  test-cli:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-dri libgl1 libglib2.0-0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Test ingestion scripts
      run: |
        # Test ingestion script help/import
        uv run python scripts/run_ingestion.py --help
        
        # Test pipeline module can be imported
        uv run python -c "from src.app.ingestion.pipeline import VideoIngestionPipeline; print('Pipeline import successful')"
        
        # Test processor discovery
        uv run python -c "
        from src.app.ingestion.processor_manager import ProcessorManager
        import logging
        logger = logging.getLogger('test')
        manager = ProcessorManager(logger)
        processors = manager.list_available_processor_types()
        print(f'Available processors: {processors}')
        assert 'keyframe' in processors, 'keyframe processor not found'
        assert 'audio' in processors, 'audio processor not found'
        print('‚úÖ Processor discovery successful')
        "

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-dri libgl1 libglib2.0-0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Try to start Vespa
      run: |
        echo "üöÄ Starting Vespa container..."
        docker run -d \
          --name vespa-test \
          -p 8080:8080 \
          -p 19071:19071 \
          vespaengine/vespa:latest
        
        echo "‚è≥ Waiting for Vespa to start (max 2 minutes)..."
        VESPA_READY=false
        for i in {1..40}; do
          if curl -s http://localhost:8080/state/v1/health >/dev/null 2>&1; then
            echo "‚úÖ Vespa is ready after $((i*3)) seconds!"
            VESPA_READY=true
            break
          fi
          echo "Waiting for Vespa... (attempt $i/40)"
          sleep 3
        done
        
        if [ "$VESPA_READY" = false ]; then
          echo "‚ö†Ô∏è Vespa failed to start within 2 minutes - will skip Vespa tests"
          echo "SKIP_VESPA_TESTS=true" >> $GITHUB_ENV
        else
          echo "SKIP_VESPA_TESTS=false" >> $GITHUB_ENV
        fi
    
    - name: Run integration tests
      env:
        COVERAGE_FILE: .coverage
      run: |
        # Run integration tests with coverage reporting only (no failure threshold)
        if [ "$SKIP_VESPA_TESTS" = "true" ]; then
          echo "üö´ Skipping Vespa-dependent tests"
          JAX_PLATFORM_NAME=cpu uv run python -m pytest tests/ingestion/integration/ \
            -m "integration and not requires_vespa" \
            -v \
            --tb=short \
            --cov=src/app/ingestion \
            --cov-report=term-missing \
            --cov-report=xml:coverage_ingestion_integration.xml
        else
          echo "‚úÖ Running all integration tests including Vespa"
          JAX_PLATFORM_NAME=cpu uv run python -m pytest tests/ingestion/integration/ \
            -m "integration" \
            -v \
            --tb=short \
            --cov=src/app/ingestion \
            --cov-report=term-missing \
            --cov-report=xml:coverage_ingestion_integration.xml
        fi
        # Rename the coverage file to avoid conflicts and make it uploadable
        if [ -f .coverage ]; then
          echo "‚úÖ Integration coverage file found, renaming to coverage_integration.dat"
          mv .coverage coverage_integration.dat
        else
          echo "‚ö†Ô∏è No .coverage file found - this will affect coverage combining"
        fi
    
    - name: Upload coverage data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: coverage_integration.dat
        retention-days: 1
        if-no-files-found: warn
    
    - name: Upload coverage XML
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration-xml
        path: coverage_ingestion_integration.xml
        retention-days: 1
        if-no-files-found: warn
    
    - name: Stop Vespa
      if: always()
      run: |
        docker stop vespa-test || true
        docker rm vespa-test || true

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install coverage tools
      run: |
        uv sync --all-extras
    
    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit
        path: ./coverage-unit/
      continue-on-error: true
    
    - name: Download unit test coverage XML
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit-xml
        path: ./coverage-unit-xml/
      continue-on-error: true
    
    - name: Download integration test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration
        path: ./coverage-integration/
      continue-on-error: true
    
    - name: Download integration test coverage XML
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration-xml
        path: ./coverage-integration-xml/
      continue-on-error: true
    
    - name: Combine coverage reports
      run: |
        # Copy coverage files with unique names
        mkdir -p combined-coverage
        has_coverage=false
        
        # Look for unit coverage file (uploaded as coverage_unit.dat)
        if [ -f ./coverage-unit/coverage_unit.dat ]; then
          cp ./coverage-unit/coverage_unit.dat combined-coverage/.coverage.unit
          echo "‚úÖ Copied unit coverage"
          has_coverage=true
        else
          echo "‚ùå No unit coverage file found"
        fi
        
        # Look for integration coverage file (uploaded as coverage_integration.dat)
        if [ -f ./coverage-integration/coverage_integration.dat ]; then
          cp ./coverage-integration/coverage_integration.dat combined-coverage/.coverage.integration
          echo "‚úÖ Copied integration coverage"
          has_coverage=true
        else
          echo "‚ùå No integration coverage file found"
        fi
        
        # Only combine if we have coverage files
        if [ "$has_coverage" = true ]; then
          cd combined-coverage
          ls -la .coverage.*
          uv run coverage combine .coverage.*
        else
          echo "‚ö†Ô∏è No coverage files to combine, skipping"
          mkdir -p combined-coverage
          cd combined-coverage
          # Create empty coverage file so later steps don't fail
          echo "No coverage data available" > coverage-combined.xml
        fi
        
        # Generate reports only if we have coverage data
        if [ "$has_coverage" = true ]; then
          echo "üìä Generating coverage reports..."
          uv run coverage report --show-missing
          uv run coverage xml -o coverage-combined.xml
          uv run coverage html -d htmlcov-combined
          
          echo "## Ingestion Module Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run coverage report >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è No coverage data to report" >> $GITHUB_STEP_SUMMARY
          # Create dummy files so upload doesn't fail
          mkdir -p htmlcov-combined
          echo "<html><body>No coverage data available</body></html>" > htmlcov-combined/index.html
        fi
    
    - name: Upload combined coverage report
      uses: actions/upload-artifact@v4
      with:
        name: ingestion-coverage-combined
        path: |
          combined-coverage/coverage-combined.xml
          combined-coverage/htmlcov-combined/
        retention-days: 7
    
