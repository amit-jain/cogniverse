name: Ingestion Pipeline Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'src/app/ingestion/**'
      - 'src/common/**'
      - 'tests/ingestion/**'
      - 'pytest.ini'
      - 'pyproject.toml'
      - '.github/workflows/ingestion-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/app/ingestion/**'
      - 'src/common/**'
      - 'tests/ingestion/**'
      - 'pytest.ini'
      - 'pyproject.toml'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-dri libgl1 libglib2.0-0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Run unit tests
      run: |
        JAX_PLATFORM_NAME=cpu uv run python -m pytest tests/ingestion/unit -m unit \
          --cov=src/app/ingestion \
          --cov-report=term-missing \
          --cov-report=xml:coverage_ingestion.xml
    
    - name: Upload unit test coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: .coverage
        retention-days: 1
    

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Run linting
      run: |
        make lint-ingestion

  test-cli:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-dri libgl1 libglib2.0-0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Test ingestion scripts
      run: |
        # Test ingestion script help/import
        uv run python scripts/run_ingestion.py --help
        
        # Test pipeline module can be imported
        uv run python -c "from src.app.ingestion.pipeline import VideoIngestionPipeline; print('Pipeline import successful')"
        
        # Test processor discovery
        uv run python -c "
        from src.app.ingestion.processor_manager import ProcessorManager
        import logging
        logger = logging.getLogger('test')
        manager = ProcessorManager(logger)
        processors = manager.list_available_processors()
        print(f'Available processors: {processors}')
        assert 'keyframe' in processors, 'keyframe processor not found'
        assert 'audio' in processors, 'audio processor not found'
        print('âœ… Processor discovery successful')
        "

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-dri libgl1 libglib2.0-0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov torch
    
    - name: Start Vespa
      run: |
        docker run -d \
          --name vespa-test \
          -p 8080:8080 \
          vespaengine/vespa:latest
        
        # Wait for Vespa to be ready (with timeout)
        timeout 180 bash -c 'until curl -f http://localhost:8080/ApplicationStatus; do echo "Waiting for Vespa..."; sleep 5; done'
    
    - name: Run integration tests
      run: |
        # Run integration tests with coverage
        uv run python -m pytest tests/ingestion/integration/ \
          -m "integration" \
          -v \
          --tb=short \
          --cov=src/app/ingestion \
          --cov-report=term-missing
    
    - name: Upload integration test coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: .coverage
        retention-days: 1
    
    - name: Stop Vespa
      if: always()
      run: |
        docker stop vespa-test || true
        docker rm vespa-test || true

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install coverage tools
      run: |
        uv sync --all-extras
    
    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit
        path: ./coverage-unit/
      continue-on-error: true
    
    - name: Download integration test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration
        path: ./coverage-integration/
      continue-on-error: true
    
    - name: Combine coverage reports
      run: |
        # Copy coverage files with unique names
        mkdir -p combined-coverage
        if [ -f ./coverage-unit/.coverage ]; then
          cp ./coverage-unit/.coverage combined-coverage/.coverage.unit
        fi
        if [ -f ./coverage-integration/.coverage ]; then
          cp ./coverage-integration/.coverage combined-coverage/.coverage.integration
        fi
        
        # Combine coverage data
        cd combined-coverage
        uv run coverage combine .coverage.*
        
        # Generate reports
        uv run coverage report --show-missing
        uv run coverage xml -o coverage-combined.xml
        uv run coverage html -d htmlcov-combined
        
        echo "## Ingestion Module Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        uv run coverage report >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: Upload combined coverage report
      uses: actions/upload-artifact@v4
      with:
        name: ingestion-coverage-combined
        path: |
          combined-coverage/coverage-combined.xml
          combined-coverage/htmlcov-combined/
        retention-days: 7
    
