name: Routing Framework Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'src/app/routing/**'
      - 'src/common/**'
      - 'tests/routing/unit/**'
      - 'tests/routing/integration/**'
      - 'configs/config.json'
      - 'pytest.ini'
      - 'pyproject.toml'
      - '.github/workflows/routing-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/app/routing/**'
      - 'src/common/**'
      - 'tests/routing/unit/**'
      - 'tests/routing/integration/**'
      - 'configs/config.json'
      - 'pytest.ini'
      - 'pyproject.toml'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache GLiNER models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-gliner-models-v1
        restore-keys: |
          ${{ runner.os }}-gliner-models-
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov
    
    - name: Run routing unit tests
      env:
        COVERAGE_FILE: .coverage
      run: |
        uv run python -m pytest tests/routing/unit -m "unit and not requires_ollama" \
          --cov=src/app/routing \
          --cov-report=term-missing \
          --cov-report=xml:coverage_routing.xml \
          --cov-fail-under=15
        # Rename the coverage file to avoid conflicts and make it uploadable
        if [ -f .coverage ]; then
          echo "✅ Coverage file found, renaming to coverage_unit.dat"
          mv .coverage coverage_unit.dat
        else
          echo "⚠️ No .coverage file found - this will affect coverage combining"
        fi
    
    
    - name: Upload coverage data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: coverage_unit.dat
        retention-days: 1
        if-no-files-found: warn
    
    - name: Upload coverage XML
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit-xml
        path: coverage_routing.xml
        retention-days: 1
        if-no-files-found: warn


  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install pytest-cov
    
    - name: Run routing integration tests
      env:
        MOCK_LLM_RESPONSES: "true"
        COVERAGE_FILE: .coverage
      run: |
        # Run routing integration tests from proper directory structure
        uv run python -m pytest tests/routing/integration -m "integration and not local_only" \
          --cov=src/app/routing \
          --cov-report=term-missing \
          --cov-report=xml:coverage_routing_integration.xml
        # Rename the coverage file to avoid conflicts and make it uploadable
        if [ -f .coverage ]; then
          echo "✅ Integration coverage file found, renaming to coverage_integration.dat"
          mv .coverage coverage_integration.dat
        else
          echo "⚠️ No .coverage file found - this will affect coverage combining"
        fi
    
    
    - name: Upload coverage data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: coverage_integration.dat
        retention-days: 1
        if-no-files-found: warn
    
    - name: Upload coverage XML
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration-xml
        path: coverage_routing_integration.xml
        retention-days: 1
        if-no-files-found: warn

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies with dev tools
      run: |
        uv sync --all-extras
    
    - name: Run linting and formatting checks
      run: make lint-routing
      continue-on-error: true

  test-cli:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install package
      run: |
        uv sync --all-extras
    
    - name: Test demo script
      run: |
        # Test that the demo script can at least be imported and show help
        uv run python scripts/demo_routing_unified.py --help || echo "Demo script needs CLI args"
    
    - name: Test routing module imports
      run: |
        uv run python -c "from src.app.routing import TieredRouter, ComprehensiveRouter; print('Routing imports successful')"

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install coverage tools
      run: |
        pip install coverage[toml]
    
    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit
        path: ./coverage-unit/
    
    - name: Download unit test coverage XML
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit-xml
        path: ./coverage-unit-xml/
    
    - name: Download integration test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration
        path: ./coverage-integration/
    
    - name: Download integration test coverage XML
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration-xml
        path: ./coverage-integration-xml/
    
    - name: Combine coverage data
      run: |
        
        # Copy coverage files with unique names
        mkdir -p combined-coverage
        has_coverage=false
        
        # Look for unit coverage file (uploaded as coverage_unit.dat)
        if [ -f ./coverage-unit/coverage_unit.dat ]; then
          cp ./coverage-unit/coverage_unit.dat combined-coverage/.coverage.unit
          echo "✅ Copied unit coverage"
          has_coverage=true
        else
          echo "❌ No unit coverage file found"
        fi
        
        # Look for integration coverage file (uploaded as coverage_integration.dat)
        if [ -f ./coverage-integration/coverage_integration.dat ]; then
          cp ./coverage-integration/coverage_integration.dat combined-coverage/.coverage.integration
          echo "✅ Copied integration coverage"
          has_coverage=true
        else
          echo "❌ No integration coverage file found"
        fi
        
        # Only combine if we have coverage files
        if [ "$has_coverage" = true ]; then
          cd combined-coverage
          ls -la .coverage.*
          coverage combine .coverage.*
        else
          echo "⚠️ No coverage files to combine, skipping"
          mkdir -p combined-coverage
          cd combined-coverage
          # Create empty coverage file so later steps don't fail
          echo "No coverage data available" > coverage-combined.xml
        fi
        
        # Generate reports only if we have coverage data
        if [ "$has_coverage" = true ]; then
          echo "📊 Generating coverage reports..."
          coverage report --show-missing
          coverage xml -o coverage-combined.xml
          coverage html -d htmlcov-combined
          
          echo "## Routing Module Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          coverage report >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No coverage data to report" >> $GITHUB_STEP_SUMMARY
          # Create dummy files so upload doesn't fail
          mkdir -p htmlcov-combined
          echo "<html><body>No coverage data available</body></html>" > htmlcov-combined/index.html
        fi
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: routing-coverage-report
        path: combined-coverage/htmlcov-combined/