name: Routing Framework Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'src/app/routing/**'
      - 'src/common/**'
      - 'tests/routing/unit/**'
      - 'tests/routing/integration/**'
      - 'configs/config.json'
      - 'pytest.ini'
      - 'pyproject.toml'
      - '.github/workflows/routing-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/app/routing/**'
      - 'src/common/**'
      - 'tests/routing/unit/**'
      - 'tests/routing/integration/**'
      - 'configs/config.json'
      - 'pytest.ini'
      - 'pyproject.toml'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache GLiNER models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-gliner-models-v1
        restore-keys: |
          ${{ runner.os }}-gliner-models-
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov pytest-mock pytest-asyncio tabulate
        # Install GLiNER - lightweight NER model that can run in CI/CD
        uv pip install --system gliner
    
    - name: Run routing unit tests
      run: |
        pytest tests/routing/unit -v \
          -m "unit and not requires_ollama and not local_only" \
          --cov=src/app/routing \
          --cov-report= \
          --cov-report=xml \
          --cov-report=term-missing
    
    - name: Check coverage files
      run: |
        echo "Checking for coverage files..."
        ls -la .coverage* || true
        ls -la coverage.* || true
        echo "All files in current directory:"
        ls -la
    
    - name: Upload coverage data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: |
          .coverage
          .coverage.*
          coverage.xml
        retention-days: 1
        if-no-files-found: warn

  integration-tests-mocked:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache GLiNER models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-gliner-models-v1
        restore-keys: |
          ${{ runner.os }}-gliner-models-
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov pytest-mock pytest-asyncio tabulate
        uv pip install --system gliner
    
    - name: Run mocked integration tests
      run: |
        # Run integration tests that don't require real LLM services
        # GLiNER tests can run since the model is small and fast
        # Exclude local_only tests which need full environment
        pytest tests/routing/integration -v \
          -m "integration and not requires_ollama and not local_only" \
          --cov=src/app/routing \
          --cov-report= \
          --cov-report=xml \
          --cov-report=term-missing
      env:
        MOCK_LLM_RESPONSES: "true"
    
    - name: Check coverage files
      run: |
        echo "Checking for coverage files..."
        ls -la .coverage* || true
        ls -la coverage.* || true
        echo "All files in current directory:"
        ls -la
    
    - name: Upload coverage data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: |
          .coverage
          .coverage.*
          coverage.xml
        retention-days: 1
        if-no-files-found: warn

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies with dev tools
      run: |
        uv sync --all-extras
        uv sync --extra dev
    
    - name: Run ruff
      run: uv run ruff check src/app/routing
      continue-on-error: true
    
    - name: Check formatting with black
      run: uv run black --check src/app/routing
      continue-on-error: true
    
    - name: Check import sorting
      run: uv run isort --check-only src/app/routing
      continue-on-error: true
    
    - name: Run mypy
      run: uv run mypy src/app/routing --ignore-missing-imports
      continue-on-error: true

  test-routing-cli:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install package
      run: |
        uv pip install --system -e .
        uv pip install --system gliner
    
    - name: Test demo script
      run: |
        # Test that the demo script can at least be imported and show help
        python scripts/demo_routing_unified.py --help || echo "Demo script needs CLI args"
    
    - name: Test routing module imports
      run: |
        python -c "from src.app.routing import TieredRouter, ComprehensiveRouter; print('Routing imports successful')"

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests-mocked]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install coverage tool
      run: |
        pip install coverage[toml]
    
    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit
        path: ./coverage-unit/
    
    - name: Download integration test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration
        path: ./coverage-integration/
    
    - name: Combine coverage data
      run: |
        echo "Contents of coverage-unit:"
        ls -la ./coverage-unit/ || true
        echo "Contents of coverage-integration:"
        ls -la ./coverage-integration/ || true
        
        # Try to use .coverage files if they exist
        if [ -f "./coverage-unit/.coverage" ] && [ -f "./coverage-integration/.coverage" ]; then
          echo "Using .coverage files"
          cp ./coverage-unit/.coverage ./.coverage.unit
          cp ./coverage-integration/.coverage ./.coverage.integration
          
          # Combine all coverage files
          coverage combine ./.coverage.*
          
          # Generate reports
          echo "## Routing Module Combined Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          coverage report --show-missing | tee -a $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Generate HTML and XML reports
          coverage html
          coverage xml
        else
          echo "WARNING: .coverage files not found, skipping coverage combination"
          echo "This job will be simplified once .coverage files are properly generated"
          
          # Create a simple summary
          echo "## Coverage Report Status" >> $GITHUB_STEP_SUMMARY
          echo "Coverage data files were not generated properly." >> $GITHUB_STEP_SUMMARY
          echo "Check the unit-tests and integration-tests-mocked jobs for details." >> $GITHUB_STEP_SUMMARY
          
          # Create dummy files to prevent job failure
          mkdir -p htmlcov
          echo "<html><body>Coverage report pending</body></html>" > htmlcov/index.html
          echo '<?xml version="1.0" ?><coverage></coverage>' > coverage.xml
        fi
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: routing-coverage-report
        path: htmlcov/