name: Evaluation Framework Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'src/evaluation/**'
      - 'src/common/**'
      - 'src/evaluation/tests/**'
      - 'pytest.ini'
      - 'pyproject.toml'
      - '.github/workflows/evaluation-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/evaluation/**'
      - 'src/common/**'
      - 'src/evaluation/tests/**'
      - 'pytest.ini'
      - 'pyproject.toml'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov pytest-mock tabulate
    
    - name: Run unit tests
      run: |
        pytest src/evaluation/tests/unit -v -m unit --cov=src/evaluation --cov-report=xml --cov-report=term-missing --cov-fail-under=50
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov pytest-mock tabulate
    
    - name: Start Phoenix
      run: |
        echo "Starting Phoenix in Docker..."
        docker pull arizephoenix/phoenix:latest
        docker run -d --name phoenix-ci \
          -p 6006:6006 \
          -p 4317:4317 \
          -e PHOENIX_WORKING_DIR=/tmp/phoenix-data \
          arizephoenix/phoenix:latest
        
        # Wait for Phoenix to be ready
        echo "Waiting for Phoenix to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:6006 >/dev/null 2>&1; do sleep 2; done'
        echo "Phoenix is ready!"
    
    - name: Run integration tests
      run: |
        pytest src/evaluation/tests/integration -v -m integration --cov=src/evaluation --cov-report=term-missing
    
    - name: Stop Phoenix
      run: |
        docker stop phoenix-ci || true
        docker rm phoenix-ci || true
      if: always()  # Always cleanup, even if tests fail
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies with dev tools
      run: |
        uv sync --all-extras
        uv sync --extra dev
    
    - name: Run ruff
      run: uv run ruff check src/evaluation
      continue-on-error: true
    
    - name: Check formatting with black
      run: uv run black --check src/evaluation
      continue-on-error: true
    
    - name: Check import sorting
      run: uv run isort --check-only src/evaluation
      continue-on-error: true
    
    - name: Run mypy
      run: uv run mypy src/evaluation --ignore-missing-imports
      continue-on-error: true

  test-cli:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install package
      run: |
        uv pip install --system -e .
    
    - name: Test CLI help
      run: |
        python -m src.evaluation.cli --help
    
    - name: Test CLI commands
      run: |
        python -m src.evaluation.cli evaluate --help
        python -m src.evaluation.cli create-dataset --help
        python -m src.evaluation.cli list-traces --help
        python -m src.evaluation.cli test --help

  coverage-check:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov tabulate
    
    - name: Generate coverage report for unit tests
      run: |
        echo "Unit test coverage report:"
        pytest src/evaluation/tests/unit -v -m unit --cov=src/evaluation --cov-report=html --cov-report=term-missing
      continue-on-error: true
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/